import argparse
import os
from CRISPRCasStackproteme import extract_single_fasta,screen,all_feature,Proteome_judge_cas,Proteome_screening
from CRISPRCasStackhmm import Proteome_cas_identification,cas_identification
from CRISPRCasStackgenome import start_CRISPR,gene_prediction,judge_cas,screening
from CRISPRCasStackloci import find_cas_loci,detect_CRISPRCAS

if __name__=='__main__':

    parser = argparse.ArgumentParser(description='Welcome to CRISPRCasStack')
    parser.add_argument('-i', default=None,help='input a FASTA file',required=True)
    parser.add_argument('-o', default=None,help='Address of the folder where output files is saved',required=True)
    parser.add_argument('-m', default=None,help='Select the type of input file, and choose parameter g if it is a genome file, or p if it is a proteome file',type=str,choices=['g','p'],required=True)
    parser.add_argument('-t', default=0.5,help='Give a Cas protein determination threshold, which is 0.5 by default',type=float)
    args = parser.parse_args()
    complete_path_input = args.i
    complete_path_output_folder = args.o
    start_mode = args.m
    threshold = args.t
    if complete_path_input == None or complete_path_output_folder == None or start_mode == None:
        raise Exception('Please enter the complete parameters')
    if start_mode == 'g':
        middle_folder_path = os.path.join(complete_path_output_folder, 'middle')
        os.mkdir(middle_folder_path)
        singlefastafolder_path = os.path.join(middle_folder_path, 'proteins')
        os.mkdir(singlefastafolder_path)
        pssmfolder_path = os.path.join(middle_folder_path, 'pssm')
        os.mkdir(pssmfolder_path)
        featurecsvfolder_path = os.path.join(middle_folder_path, 'featurecsv')
        psefolder_path = os.path.join(featurecsvfolder_path, 'pse')
        aatpfolder_path = os.path.join(featurecsvfolder_path, 'aatp')
        trifolder_path = os.path.join(featurecsvfolder_path, 'tri')
        os.mkdir(featurecsvfolder_path)
        os.mkdir(psefolder_path)
        os.mkdir(aatpfolder_path)
        os.mkdir(trifolder_path)
        dbfolder_path = os.path.join(os.path.split(os.path.realpath(__file__))[0],'database')
        hmmmodel_path = os.path.join(os.path.split(os.path.realpath(__file__))[0],'hmm')
        tbloudfolder_path = os.path.join(middle_folder_path, 'tbloud')
        os.mkdir(tbloudfolder_path)
        csvfolder_path = os.path.join(middle_folder_path, 'csv')
        os.mkdir(csvfolder_path)
        CRISPR_tar_name = start_CRISPR(complete_path_input, complete_path_output_folder)
        allfasta_path = os.path.join(middle_folder_path, 'all_protein.fasta')
        allgbk_path = os.path.join(middle_folder_path, 'gene.gbk')
        allgene_path = os.path.join(middle_folder_path, 'all_gene.fasta')
        gene_prediction(complete_path_input, allfasta_path, allgene_path, allgbk_path)
        extract_single_fasta(allfasta_path, singlefastafolder_path)
        screen(singlefastafolder_path, dbfolder_path, pssmfolder_path)
        all_feature(singlefastafolder_path, pssmfolder_path, psefolder_path,aatpfolder_path,trifolder_path)
        cas_ml_csv_savepath = os.path.join(middle_folder_path, 'cas_ml.csv')
        judge_cas(singlefastafolder_path, psefolder_path,aatpfolder_path,trifolder_path, cas_ml_csv_savepath,threshold)
        cas_annotation_csv_savepath = os.path.join(middle_folder_path, 'cas_annotation.csv')
        cas_identification(singlefastafolder_path, hmmmodel_path, tbloudfolder_path, csvfolder_path,cas_annotation_csv_savepath)
        final_csv_savepath = os.path.join(complete_path_output_folder, 'cas_result.csv')
        screening(cas_ml_csv_savepath, cas_annotation_csv_savepath, allfasta_path, final_csv_savepath)
        cas_loci_savepath = os.path.join(complete_path_output_folder, 'cas_loci.csv')
        find_cas_loci(final_csv_savepath, cas_loci_savepath)
        CRISPR_Cas_savepath = os.path.join(complete_path_output_folder, 'CRISPR_Cas.csv')
        CRISPR_path = os.path.join(complete_path_output_folder, 'CRISPR_result.csv')
        detect_CRISPRCAS(cas_loci_savepath, CRISPR_path, CRISPR_Cas_savepath)
        os.system('mv ' + allfasta_path + ' ' + complete_path_output_folder)
        os.system('mv ' + allgene_path + ' ' + complete_path_output_folder)
        os.system('rm -rf ' + middle_folder_path)
        print('The calculation task has been successfully completed!!!')
    elif start_mode == 'p':
        middle_folder_path = os.path.join(complete_path_output_folder, 'middle')
        os.mkdir(middle_folder_path)
        singlefastafolder_path = os.path.join(middle_folder_path, 'proteins')
        os.mkdir(singlefastafolder_path)
        pssmfolder_path = os.path.join(middle_folder_path, 'pssm')
        os.mkdir(pssmfolder_path)
        featurecsvfolder_path=os.path.join(middle_folder_path,'featurecsv')
        psefolder_path=os.path.join(featurecsvfolder_path,'pse')
        aatpfolder_path=os.path.join(featurecsvfolder_path,'aatp')
        trifolder_path=os.path.join(featurecsvfolder_path,'tri')
        os.mkdir(featurecsvfolder_path)
        os.mkdir(psefolder_path)
        os.mkdir(aatpfolder_path)
        os.mkdir(trifolder_path)
        dbfolder_path = os.path.join(os.path.split(os.path.realpath(__file__))[0], 'database')
        hmmmodel_path = os.path.join(os.path.split(os.path.realpath(__file__))[0], 'hmm')
        tbloudfolder_path = os.path.join(middle_folder_path, 'tbloud')
        os.mkdir(tbloudfolder_path)
        csvfolder_path = os.path.join(middle_folder_path, 'csv')
        os.mkdir(csvfolder_path)
        extract_single_fasta(complete_path_input, singlefastafolder_path)
        screen(singlefastafolder_path, dbfolder_path, pssmfolder_path)
        all_feature(singlefastafolder_path, pssmfolder_path, psefolder_path,aatpfolder_path,trifolder_path)
        cas_ml_csv_savepath = os.path.join(middle_folder_path, 'cas_ml.csv')
        Proteome_judge_cas(singlefastafolder_path, psefolder_path,aatpfolder_path,trifolder_path, cas_ml_csv_savepath,threshold)
        cas_annotation_csv_savepath = os.path.join(middle_folder_path, 'cas_annotation.csv')
        Proteome_cas_identification(singlefastafolder_path, hmmmodel_path, tbloudfolder_path, csvfolder_path,cas_annotation_csv_savepath)
        final_csv_savepath = os.path.join(complete_path_output_folder, 'cas_result.csv')
        Proteome_screening(cas_ml_csv_savepath, cas_annotation_csv_savepath, complete_path_input, final_csv_savepath)
        os.system('rm -rf ' + middle_folder_path)
        print('The calculation task has been successfully completed!!!')
    else:
        raise Exception('Please enter g mode or p mode')

